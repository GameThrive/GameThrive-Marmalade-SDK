/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eGameThrive.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef       void(*GameThriveInitialize_t)(const char* appId, const char* googleProjectNumber, GameThriveNotificationReceivedCallbackFn callbackFn, s3eBool autoRegister);
typedef       void(*GameThriveSendTag_t)(const char* key, const char* value);
typedef       void(*GameThriveGetTags_t)(GameThriveTagsReceivedCallbackFn callbackFn);
typedef       void(*GameThriveDeleteTag_t)(const char* key);
typedef       void(*GameThriveSendPurchase_t)(const double* amount);
typedef       void(*GameThriveGetIdsAvailable_t)(GameThriveIdsAvailableCallbackFn callbackFn);
typedef        int(*GameThriveSystemPaused_t)(void* systemData, void* userData);
typedef        int(*GameThriveSystemResume_t)(void* systemData, void* userData);
typedef       void(*GameThriveRegisterForPushNotifications_t)();

/**
 * struct that gets filled in by s3eGameThriveRegister
 */
typedef struct s3eGameThriveFuncs
{
    GameThriveInitialize_t m_GameThriveInitialize;
    GameThriveSendTag_t m_GameThriveSendTag;
    GameThriveGetTags_t m_GameThriveGetTags;
    GameThriveDeleteTag_t m_GameThriveDeleteTag;
    GameThriveSendPurchase_t m_GameThriveSendPurchase;
    GameThriveGetIdsAvailable_t m_GameThriveGetIdsAvailable;
    GameThriveSystemPaused_t m_GameThriveSystemPaused;
    GameThriveSystemResume_t m_GameThriveSystemResume;
    GameThriveRegisterForPushNotifications_t m_GameThriveRegisterForPushNotifications;
} s3eGameThriveFuncs;

static s3eGameThriveFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x4315377c, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eGameThrive");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x4315377c, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eGameThriveAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

void GameThriveInitialize(const char* appId, const char* googleProjectNumber, GameThriveNotificationReceivedCallbackFn callbackFn, s3eBool autoRegister)
{
    IwTrace(GAMETHRIVE_VERBOSE, ("calling s3eGameThrive[0] func: GameThriveInitialize"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_GameThriveInitialize(appId, googleProjectNumber, callbackFn, autoRegister);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void GameThriveSendTag(const char* key, const char* value)
{
    IwTrace(GAMETHRIVE_VERBOSE, ("calling s3eGameThrive[1] func: GameThriveSendTag"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_GameThriveSendTag(key, value);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void GameThriveGetTags(GameThriveTagsReceivedCallbackFn callbackFn)
{
    IwTrace(GAMETHRIVE_VERBOSE, ("calling s3eGameThrive[2] func: GameThriveGetTags"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_GameThriveGetTags(callbackFn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void GameThriveDeleteTag(const char* key)
{
    IwTrace(GAMETHRIVE_VERBOSE, ("calling s3eGameThrive[3] func: GameThriveDeleteTag"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_GameThriveDeleteTag(key);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void GameThriveSendPurchase(const double* amount)
{
    IwTrace(GAMETHRIVE_VERBOSE, ("calling s3eGameThrive[4] func: GameThriveSendPurchase"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_GameThriveSendPurchase(amount);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void GameThriveGetIdsAvailable(GameThriveIdsAvailableCallbackFn callbackFn)
{
    IwTrace(GAMETHRIVE_VERBOSE, ("calling s3eGameThrive[5] func: GameThriveGetIdsAvailable"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_GameThriveGetIdsAvailable(callbackFn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

int GameThriveSystemPaused(void* systemData, void* userData)
{
    IwTrace(GAMETHRIVE_VERBOSE, ("calling s3eGameThrive[6] func: GameThriveSystemPaused"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_GameThriveSystemPaused(systemData, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

int GameThriveSystemResume(void* systemData, void* userData)
{
    IwTrace(GAMETHRIVE_VERBOSE, ("calling s3eGameThrive[7] func: GameThriveSystemResume"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_GameThriveSystemResume(systemData, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void GameThriveRegisterForPushNotifications()
{
    IwTrace(GAMETHRIVE_VERBOSE, ("calling s3eGameThrive[8] func: GameThriveRegisterForPushNotifications"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_GameThriveRegisterForPushNotifications();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
